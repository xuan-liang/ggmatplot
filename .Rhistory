x
ggmatclean(x)
#' Function to convert a wide dataframe into long format
#'
#' @param data dataframe to pivot.
#' @param names_to a string specifying the name of the column to create from the column names of those being pivoted.
#' @param values_to a string specifying the name of the column to create from the data stored in cell values of the columns being pivoted.
#' @param id_cols columns that uniquely identify observations. Columns to not pivot into longer format.
#'
#' @return a dataframe in long format
#'
#' @examples
#' # Define a data set
#' iris_sub <- subset(iris, Species == "setosa")[1:4]
#' # Use first two columns as ID columns and pivot the second two columns to long format
#' ggpivotlonger(iris_sub, names_to = "Measurement", values_to = "Value", c(1,2))
#' @NoRd
ggpivotlonger <- function (data, names_to = "", values_to = "", id_cols=NULL){
# holder for long format dataframe
long_df <- data.frame(matrix(ncol = 2+length(id_cols), nrow = 0))
colnames(long_df) <-  c(colnames(data[id_cols]),names_to,values_to)
n_widecols <- ncol(data)-length(id_cols)
widecols <- ifelse(is.null(id_cols), data, data[-1*id_cols])
print(widecols)
for(i in 0:nrow(data)-1){
for(j in 1:n_widecols){
if(!is.null(id_cols)){
for(k in 1:length(id_cols)){
long_df[n_widecols*i+j,k] <- data[i+1,id_cols[k]]
}
}
long_df[n_widecols*i+j,names_to] <- colnames(widecols)[j]
long_df[n_widecols*i+j,values_to] <- widecols[i+1,j]
}
}
return(long_df)
}
# ggpivotlonger <- function (data, names_to = "", values_to = "", id_cols){
#
#   if(!missing(id_cols)){
#     long_df <- data.frame(matrix(ncol = 2+length(id_cols), nrow = 0))
#     colnames(long_df) <-  c(colnames(data[id_cols]),names_to,values_to)
#     n_widecols <- ncol(data)-length(id_cols)
#     widecols <- data[-1*id_cols]
#     for(i in 0:nrow(data)-1){
#       for(j in 1:n_widecols){
#         for(k in 1:length(id_cols)){
#           long_df[n_widecols*i+j,k] <- data[i+1,id_cols[k]]
#         }
#         long_df[n_widecols*i+j,names_to] <- colnames(widecols)[j]
#         long_df[n_widecols*i+j,values_to] <- widecols[i+1,j]
#       }
#     }
#   }
#   else{
#     long_df <- data.frame(matrix(ncol = 2, nrow = 0))
#     colnames(long_df) <-  c(names_to,values_to)
#     n_widecols <- ncol(data)
#     widecols <- data
#     for(i in 0:nrow(data)-1){
#       for(j in 1:n_widecols){
#         long_df[n_widecols*i+j,names_to] <- colnames(widecols)[j]
#         long_df[n_widecols*i+j,values_to] <- widecols[i+1,j]
#       }
#     }
#   }
#   return(long_df)
# }
ggmatclean(x)
devtools::load_all()
ggmatclean(x)
devtools::load_all()
ggmatclean(x)
devtools::load_all()
ggmatclean(x)
devtools::load_all()
ggmatclean(x)
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")[c(1:5),]
x <- iris_sub[,c(2:3)]
x
ggmatclean(x)
x <- iris_sub[,1:3]
y <- iris_sub[,4]
x
y
ggmatclean(x,y)
x <- iris_sub[,1]
y <- iris_sub[,2:3]
x
y
ggmatclean(x,y)
x <- iris_sub[,1:2]
y <- iris_sub[,3:4]
x
y
ggmatclean(x,y)
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")[c(1:5),]
x <- iris_sub[,c(2:3)]
x
ggmatclean(x)
x <- iris_sub[,1:3]
y <- iris_sub[,4]
ggmatclean(x,y)
x <- iris_sub[,1]
y <- iris_sub[,2:3]
ggmatclean(x,y)
x <- iris_sub[,1:2]
y <- iris_sub[,3:4]
ggmatclean(x,y)
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")[1:4]
iris_sub
ggpivotlonger(iris_sub, names_to = "Measurement", values_to = "Value", c(1,2))
?stop
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot",
"violin","ecdf") )
stop("`plot.type` can not take this value", call. = FALSE)
}
ggmatplot(x=x,y=y, plot.type = "asd")
}
ggmatplot(x=x,y=y, plot.type = "asd")
}
iris_sub <- subset(iris, Species == "setosa")[c(1:5),]
x <- iris_sub[,1:3]
y <- iris_sub[,4]
x
y
}
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot",
"violin","ecdf") )
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("No data have been put into the ggmatplot function", call. = FALSE)
}
}
ggmatplot(x=x)
ggmatplot(y=y)
}
}
}
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
}
}
}
}
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
print(data.list)
}
}
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
print(data.list)
}
ggmatplot(x,y)
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
print(p)
}
ggmatplot(x,y)
print(data.list)
ggmatplot(x,y)
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
#
#   if(plot.type=="point"){
#     p <- p +
#       geom_point(aes(x=))
#   }
print(data.list)
}
ggmatplot(x,y)
x
y
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
if(plot.type=="point"){
p <- p +
geom_point(aes(x=get(data.list$xname), y = get(data.list$yname), group = get(data.list$group)))
}
print(data.list)
print(p)
}
ggmatplot(x,y)
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
if(plot.type=="point"){
p <- p +
geom_point(aes(x=get(data.list$yname), y = get(data.list$xname), group = get(data.list$group)))
}
print(data.list)
print(p)
}
ggmatplot(x,y)
}
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
if(plot.type=="point"){
p <- p +
geom_point(aes(x=get(data.list$yname), y = get(data.list$xname), group = get(data.list$group)))
}
print(data.list)
print(get(data.list$yname))
}
ggmatplot(x,y)
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
if(plot.type=="point"){
p <- p +
geom_point(data = data.list, aes(x=get(data.list$yname), y = get(data.list$xname), group = get(data.list$group)))
}
print(data.list)
print(p)
}
ggmatplot(x,y)
#' Quick matplot function
#'
#' `ggmatplot` is a quick way to make a simplier and similar plot as what `matplot` does but with a ggplot version.
#'
#' @param x,y vectors or matrices of data for plotting. The number of rows should match. If one of them are missing, the other is taken as y and an x vector of 1:n is used. Missing values (NAs) are allowed.
#' @param color vector of colors and they are used cyclically.
#' @param shape vector of shapes and they are used cyclically.
#' @param linetype vector of linetypes colors  and they are used cyclically.
#' @param xlim,ylim ranges of x and y axes, as in [plot()].
#' @param log Which variables to log transform ("x", "y", or "xy")
#' @param main,xlab,ylab Character vector giving plot title,
#'   x axis label, and y axis label respectively.
#' @param legend_label Character vector giving legend tables for different groups.
#' @param legend_title Character giving legend title
#' @param geom Character vector specifying geom(s) to draw. Defaults to
#'  "point". Other options are "line" or c("point","line").
#' @param asp The y/x aspect ratio
#' @import ggplot2
#' @export
#'
#' @examples
#' # Define a data set
#' iris_sub <- subset(iris, Species == "setosa")
#' ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)])
#' # Modify legend label and axis
#' ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)], shape = c("s","S"), legend_label =  c("Sepal","Petal"), legend_title = "", xlab = "Length", ylab="Width")
ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL, fill=NULL,
xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = NULL, ylab = NULL,
legend_label =  NULL, legend_title = NULL,
plot.type = "point", asp = NA){
if (!plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot", "violin","ecdf"))
stop("`plot.type` can not take this value", call. = FALSE)
if (!missing(x)&!missing(y)){
data.list <- ggmatclean (x=x, y=y)
} else if (!missing(x)){
data.list <- ggmatclean (x=x)
} else{
stop("`x` can not be missing", call. = FALSE)
}
p <- ggplot(data=data.list$data)
if(plot.type=="point"){
p <- p +
geom_point(data = data.list$data, aes(x=get(data.list$yname), y = get(data.list$xname), group = get(data.list$group)))
}
print(data.list)
print(p)
}
#
# ggmatplot <- function (x, y, color = NULL, shape = NULL, linetype = NULL,
#                        xlim = c(NA, NA), ylim = c(NA, NA), log = "",
#                        main = NULL, xlab = NULL, ylab = NULL,
#                        legend_label =  NULL, legend_title = NULL,
#                        geom = "point", asp = NA){
#
#   caller_env <- parent.frame()
#
#   if (!is.character(geom)) stop("`geom` must be a character vector", call. = FALSE)
#
#   if (!missing(x)){
#     ncolx <- ncol(as.data.frame(x))
#   } else{
#     ncolx=1
#   }
#
#   if (!missing(y)){
#     ncoly <- ncol(as.data.frame(y))
#   }else{
#     ncoly=1
#   }
#
#   if (missing(y) & ncolx == 1) {
#     x <- data.frame(x)
#     data <- mutate(x, Observation_number = 1:n())
#     old_namex <- colnames(data)[1]
#     data <- rename(data, new_namex = old_namex)
#     p <- qplot(x = Observation_number, y = new_namex, data = data, geom = geom) + ylab(old_namex) + xlab("Observation Number")
#   } else if (missing(y) & ncolx > 1) {
#     data <- mutate(x, Observation_number = 1:n()) %>% gather(key = "Column", value = "Value", -(ncolx+1))
#     p <- qplot(x = Observation_number, y = Value, data = data, color = Column, shape = Column, linetype = Column, geom = geom)  + xlab("Observation Number")
#   } else if (missing(x) & ncoly == 1) {
#     y <- data.frame(y)
#     data <- mutate(y, Observation_number = 1:n())
#     old_namey <- colnames(data)[1]
#     data <- rename(data, new_namey = old_namey)
#     p <- qplot(x = Observation_number, y = new_namey, data = data, geom = geom) + ylab(old_namey) + xlab("Observation Number")
#   } else if (missing(x) & ncoly > 1) {
#     data <- mutate(y, Observation_number = 1:n()) %>% gather(key = "Column", value = "Value", -(ncoly+1))
#     p <- qplot(x = Observation_number, y = Value, data = data, color = Column, shape = Column, linetype = Column, geom = geom)  + xlab("Observation Number")
#   } else if (ncolx == 1 & ncoly == 1) {
#     data <- data.frame(x,y)
#     old_namex <- colnames(data)[1]
#     old_namey <- colnames(data)[2]
#     data <- rename(data, new_namex = old_namex, new_namey = old_namey)
#     p <- qplot(x = new_namex, y = new_namey, data = data) + xlab(old_namex) +  ylab(old_namey)
#   } else if (ncolx == 1& ncoly > 1) {
#     data <- data.frame(x,y)
#     ncol <- ncol(data)
#     old_namex <- colnames(data)[1]
#     data <- mutate(data, Observation_number = 1:n()) %>% gather(key = "Column", value = "Value", -c(1,(ncol+1)))  %>% rename(new_namex = old_namex)
#     p <- qplot(x = new_namex, y = Value, data = data, color = Column, shape = Column, linetype = Column, geom = geom) + xlab(old_namex)
#   } else if (ncolx > 1 & ncoly == 1) {
#     data <- data.frame(x,y)
#     ncol <- ncol(data)
#     old_namey <- colnames(data)[ncol]
#     data <- mutate(data, Observation_number = 1:n()) %>% gather(key = "Column", value = "Value", -c(ncol,(ncol+1)))  %>% rename(new_namey = old_namey)
#     p <- qplot(x = Value, y = new_namey, data = data, color = Column, shape = Column, linetype = Column, geom = geom) + ylab(old_namey)
#   } else if (ncolx > 1 & ncoly > 1 & ncolx == ncoly) {
#     colnames(x) = colnames(y) = paste0("Column ", 1:ncolx)
#     x <- gather(x, key = "Group", value = "x") %>% mutate(Observation_number = 1:n())
#     y <- gather(y, key = "Group", value = "y") %>% mutate(Observation_number = 1:n())
#     data <- full_join(x, y, by = "Observation_number") %>% rename(Column = Group.x)
#     p <- qplot(x = x, y = y, data = data, color = Column, shape = Column, linetype = Column, geom = geom)
#   } else{
#     stop("`x`` and `y` must have only 1 or the same number of columns", call. = FALSE)
#   }
#
#   maxcol= max(ncolx,ncoly)
#   maxshape = maxcol
#   maxlinetyoe = maxcol
#   if(!is.null(color) & length(color) != maxcol){
#     color=rep(color,maxcol)[1:maxcol]
#   }
#
#   if(!is.null(shape) & length(shape) != maxcol){
#     shape=rep(shape,maxcol)[1:maxcol]
#   }
#
#   if(!is.null(linetype) & length(linetype) != maxcol){
#     linetype=rep(shape,maxcol)[1:maxcol]
#   }
#
#   if(is.null(legend_title)){
#     legend_title = ""
#   }
#   if(is.null(legend_label)){
#     legend_label = unique(data$Column)
#   }
#
#   if (!is.null(color))
#     p <- p + scale_color_manual(name = legend_title, labels = legend_label, values = color)
#   if (is.null(color))
#     p <- p + scale_color_discrete(name = legend_title, labels = legend_label)
#
#   if (!is.null(shape))
#     p <- p + scale_shape_manual(name = legend_title, labels = legend_label, values = shape)
#   if (is.null(shape))
#     p <- p + scale_shape_discrete(name = legend_title, labels = legend_label)
#
#   if (!is.null(linetype))
#     p <- p + scale_linetype_manual(name = legend_title, labels = legend_label, values = linetype)
#   if (is.null(linetype))
#     p <- p + scale_linetype_discrete(name = legend_title, labels = legend_label)
#
#   if (!is.null(main)) p <- p + ggtitle(main)
#
#   if (!missing(xlab)) p <- p + xlab(xlab)
#   if (!missing(ylab)) p <- p + ylab(ylab)
#
#   if (!missing(xlim)) p <- p + xlim(xlim)
#   if (!missing(ylim)) p <- p + ylim(ylim)
#
#   logv <- function(var) var %in% strsplit(log, "")[[1]]
#
#   if (logv("x")) p <- p + scale_x_log10()
#   if (logv("y")) p <- p + scale_y_log10()
#
#   if (!is.na(asp)) p <- p + theme(aspect.ratio = asp)
#
#   p
# }
#
ggmatplot(x,y)
