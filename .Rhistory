params$dlinetype <- dlinetype
if(plot.type=="point"){
p <-ggscatter(data = data, x = xname, y = yname, color = dcolor, shape=dshape)
}
if(plot.type=="line"){
p <-ggline(data = data, x = xname, y = yname, color= dcolor, linetype = dlinetype, plot_type = "l")
}
if(plot.type=="both"){
p <-ggline(data = data, x = xname, y = yname, color= dcolor, linetype = dlinetype, shape=dshape, ...)
}
if(plot.type=="density"){
p <-ggdensity(data = data, x = yname, color = dcolor, fill = dfill, ...)+ xlab("x")
}
if(plot.type=="histogram"){
params$x <- yname
option <- getoption(params, plot.type)
p <- do.call(gghistogram, option)
p <- p + xlab("x")
}
if(plot.type=="boxplot"){
p <-ggboxplot(data = data, x = group, y = yname, color = dcolor) + xlab("")
}
if(plot.type=="dotplot"){
p <-ggdotplot(data = data, x = group, y = yname, color = dcolor) + xlab("")
}
if(plot.type=="errorplot"){
p <-ggerrorplot(data = data, x = group, y = yname, color = dcolor) + xlab("")
}
if(plot.type=="violin"){
p <-ggviolin(data = data, x = group, y = yname, color = dcolor) + xlab("")
}
if(plot.type=="ecdf"){
p <-ggecdf(data = data, x = yname, color = dcolor) + xlab("")
}
maxcol= max(ncolx,ncoly)
maxshape = maxcol
maxlinetyoe = maxcol
if(!is.null(color) & length(color) != maxcol){
color=rep(color,maxcol)[1:maxcol]
}
if(!is.null(shape) & length(shape) != maxcol){
shape=rep(shape,maxcol)[1:maxcol]
}
if(!is.null(linetype) & length(linetype) != maxcol){
linetype=rep(shape,maxcol)[1:maxcol]
}
if(is.null(legend_title)){
legend_title = ""
}
if(is.null(legend_label)){
legend_label = unique(data$Group)
}
if (!is.null(color))
p <- p + scale_color_manual(name = legend_title, labels = legend_label, values = color)
if (is.null(color))
p <- p + scale_color_discrete(name = legend_title, labels = legend_label)
if (!is.null(shape))
p <- p + scale_shape_manual(name = legend_title, labels = legend_label, values = shape)
if (is.null(shape))
p <- p + scale_shape_discrete(name = legend_title, labels = legend_label)
if (!is.null(linetype))
p <- p + scale_linetype_manual(name = legend_title, labels = legend_label, values = linetype)
if (is.null(linetype))
p <- p + scale_linetype_discrete(name = legend_title, labels = legend_label)
if (!is.null(fill))
p <- p + scale_fill_manual(name = legend_title, labels = legend_label, values = fill)
if (is.null(fill))
p <- p + scale_fill_discrete(name = legend_title, labels = legend_label)
if (!is.null(main)) p <- p + ggtitle(main) + theme(plot.title = element_text(hjust = 0.5))
if (!missing(xlab)) p <- p + xlab(xlab)
if (!missing(ylab)) p <- p + ylab(ylab)
if (!missing(xlim)) p <- p + xlim(xlim)
if (!missing(ylim)) p <- p + ylim(ylim)
logv <- function(var) var %in% strsplit(log, "")[[1]]
if (logv("x")) p <- p + scale_x_log10()
if (logv("y")) p <- p + scale_y_log10()
if (!is.na(asp)) p <- p + theme(aspect.ratio = asp)
p <-p + theme(legend.position="right")
if(missing(y)& ncolx==1){
p<- p + theme(legend.position="none")
}
return(p)
}
x <- rnorm(100,sd=2)
y <- x*0.5+rnorm(100,sd=1)
ggmatplot1(x,y)
library(tidyverse)
x <- rnorm(100,sd=2)
y <- x*0.5+rnorm(100,sd=1)
ggmatplot1(x,y)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
ggmatplot1(x,y)
x <- rnorm(100,sd=2)
y <- x*0.5+rnorm(100,sd=1)
fit.y <- fitted(lm(y~x))
p <- ggmatplot(x,cbind(y,fit.y))
ggmatplot1(x,cbind(y,fit.y))
ggmatplot1(x, plot.type = "density", legend_title = "Level", alpha=0.3, rug=TRUE)
x <- list(low = rnorm(30, -5, 2),
medium = rnorm(20),
high = rnorm(40, 3, 0.5))
ggmatplot1(x, plot.type = "density", legend_title = "Level", alpha=0.3, rug=TRUE)
ggmatplot1(x, plot.type = "density", legend_title = "Level", alpha=0.3, rug=TRUE)
if (! plot.type %in% c("point", "line", "both", "density", "histogram", "boxplot", "dotplot","errorplot",
"violin","ecdf") )
devtools::load_all()
ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)], color = 1 ,shape = c("S","P"), xlab = "Length", ylab="Width")
iris_sub <- subset(iris, Species == "setosa")
ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)], color = 1 ,shape = c("S","P"), xlab = "Length", ylab="Width")
ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)])
X <- 1:10
Y=X^2
Z=X^2-2*X
matplot(X,cbind(Y,Z),pch=c(16,1),xlab="x",ylab="X^2 and X^2-2*X")
legend(1,100,legend=c("y","Z"),pch=c(16,1))
ggmatplot(X,cbind(Y,Z), shape = c(16,1),legend_label =  c("X^2","X^2-2*X"),geom=c("point","line"))
ggmatplot(X,cbind(Y,Z), shape = c(16,1),legend_label =  c("X^2","X^2-2*X"),geom="both"))
ggmatplot(X,cbind(Y,Z), shape = c(16,1),legend_label =  c("X^2","X^2-2*X"),plot.type ="both")
ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)])
ggmatplot(iris_sub[,c(1,3)], iris_sub[,c(2,4)], color = 1 ,shape = c("S","P"), xlab = "Length", ylab="Width")
x <- rnorm(100,sd=2)
y <- x*0.5+rnorm(100,sd=1)
fit.y <- fitted(lm(y~x))
ggmatplot(x,cbind(y,fit.y))
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")
x <- iris_sub[, 1:2]
y <- iris_sub[, 3:4]
ggmatplot(x,y)
ggmatplot(x,y,grade=1)
ggmatplot(x,y,color=1)
ggmatplot(x,y,color=c(1,2))
ggmatplot(x,y,shape=c(1,2))
ggmatplot(x,y,color=c("red","blue"))
option <- list()
params <- list(alpha = 0.2)
params <- list(alpha = 0.2,binwidth=10)
params
getoption(params = params, plot.type = "histogram")
getoption <- function(params, plot.type){
option <- list()
if(plot.type=="histogram")
allowed_options <- c("data","x","color","fill","linetype","alpha", "bins", "binwidth", "add", "add.params", "rug","add_density","position")
for (key in names(params)) {
value <- params[[key]]
if (key %in% allowed_options) {
option[[key]] <- value
}
}
return(option)
}
getoption(params = params, plot.type = "histogram")
data <- matclean(x,y)
data
data <- matclean(x,y)$data
data
ggplot(data, aes(x = y)) +geom_histogram()
ggplot(data, aes(x = y, group = Group)) +geom_histogram()
ggplot(data, aes(x = y, group = Group, color = Group)) +geom_histogram()
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram()
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(binwidth = 10)
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(binwidth = 1)
params
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(alpha = 0.1)
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(params)
params$alpha <- 0.8
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(params)
params
x <- getoption(params, "histogram")
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(x)
ggplot(data, aes(x = y, group = Group, color = Group, fill = Group)) +geom_histogram(x)
x
data <- tibble(a = 1:3, b = 11:13)
ggplot(data, aes(x = a, y = b))
p <- ggplot(data, aes(x = a, y = b))
data <- tibble(a = 1:3, b = 11:13)
p <- ggplot(data, aes(x = a, y = b))
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
if(geom == "point"){
p <- p + geom_point()
}
return(p)
}
plot_modify(p, "point")
plot_modify(p, "point", alpha=0.1)
print(modifications)
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
print(modifications)
if(geom == "point"){
p <- p + geom_point()
}
return(p)
}
plot_modify(p, "point", alpha=0.1)
p <- ggplot(data, aes(x = a, y = b))
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
print(modifications)
if(geom == "point"){
p <- p + geom_point()
}
return(p)
}
plot_modify(p, "point", alpha=0.1, shape = 3)
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
if(geom == "point"){
p <- p + geom_point(...)
}
return(p)
}
plot_modify(p, "point", alpha=0.1, size = 0.3)
data <- tibble(a = 1:3, b = 11:13)
p <- ggplot(data, aes(x = a, y = b))
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
if(geom == "point"){
p <- p + geom_point()
}
return(p)
}
plot_modify(p, "point", alpha=0.1, size = 0.3)
p <- ggplot(data, aes(x = a, y = b))
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
if(geom == "point"){
p <- p + geom_point(...)
}
return(p)
}
plot_modify(p, "point", alpha=0.1, size = 0.3)
p <- ggplot(data, aes(x = a, y = b))
plot_modify <- function(p, geom = "", ...){
modifications <- list(...)
if(geom == "point"){
p <- p + geom_point(modifications)
}
return(p)
}
plot_modify(p, "point", alpha=0.1, size = 0.3)
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")
x <- iris_sub[, 1:2]
y <- iris_sub[, 3:4]
ggmatplot(x,y,color=c("red","blue"))
ggmatplot(x,y,color=c("red","blue"), alpha=0.2)
devtools::load_all()
ggmatplot(x,y,color=c("red","blue"), alpha=0.2)
devtools::load_all()
ggmatplot(x,y,color=c("red","blue"), alpha=0.2)
ggmatplot(x,y,color=c("red","blue"), alpha=0.5)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8, binwidth = 10)
ggmatplot(x,y,color=c("red","blue"), alpha=0.1, binwidth = 10)
styler:::style_active_file()
styler:::style_active_file()
devtools::load_all()
ggmatplot(x,y,color=c("red","blue"), alpha=0.1, binwidth = 10)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8)
ggmatplot(x,y,color=c("red","blue"))
ggmatplot(x,y,color=c("red"))
ggmatplot(x,y,color=c("red"), alpha = 0.8)
ggmatplot(x,y,color=c("red"), alpha = 0.2)
ggmatplot(x,y,color=c("red"), alpha = 0.2, title = "wetwet")
ggmatplot(x,y,color=c("red"), alpha = 0.2, legend_title = "wetwet")
ggmatplot(x,y,color=c("red"), alpha = 0.2, legend_title = "wetwet", main = "gggg")
ggmatplot(x,y,color=c("red"), alpha = 0.2, legend_title = "wetwet", main = "gggg", plot.type = "line")
ggmatplot(x,y,color=c("red","blue"), alpha = 0.2, legend_title = "wetwet", main = "gggg", plot.type = "line")
ggmatplot(x,y,color=c("red","blue"), alpha = 0.2, legend_title = "wetwet", main = "gggg", plot.type = "line")
devtools::load_all()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.2, legend_title = "wetwet", main = "gggg", plot.type = "line")
ggmatplot(x,y,color=c("red","blue"), alpha = 0.1, legend_title = "wetwet", main = "gggg", plot.type = "line")
ggmatplot(x,y,color=c("red","blue"), alpha = 0.1, legend_title = "wetwet", main = "gggg", plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.7, legend_title = "wetwet", main = "gggg", plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.9, legend_title = "wetwet", main = "gggg", plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.3, plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.1, plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.9, plot.type = "line") + theme_bw()
ggmatplot(x,y,color=c("red","blue"), alpha = 0.9, plot.type = "line")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line")
devtools::load_all()
ggmatplot(x,y,color=c("red","blue"), plot.type = "histogram")
ggmatplot(y,color=c("red","blue"), plot.type = "histogram")
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = "5")
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 5)
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 0.1)
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.3)
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.2)
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.7)
ggmatplot(y,color=c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.7, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.7, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.2, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.4, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.4, color="black", ok = "no")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.4, color="black", stat="identity")
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.4, color="black")
devtools::load_all()
ggmatplot(y,fill =c("red","blue"), plot.type = "histogram", binwidth = 0.1, alpha=0.4, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "both", binwidth = 0.1, alpha=0.4, color="black")
ggmatplot(y,fill =c("red","blue"), plot.type = "both", binwidth = 0.1, alpha=0.4)
ggmatplot(y,fill =c("red","blue"), plot.type = "both", alpha=0.4)
ggmatplot(y,fill =c("red","blue"), plot.type = "both", alpha=0.2)
ggmatplot(y,fill =c("red","blue"), alpha=0.2)
ggmatplot(y,fill =c("red","blue"), alpha=0.2, shape=13)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=13)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=17)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=19)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2, plot.type = "histogram")
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2, plot.type = "histogram", random=4)
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2, plot.type = "histogram")
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2, plot.type = "violin")
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, binwidth = 0.2, plot.type = "density")
ggmatplot(y,fill =c("red","blue"), alpha=0.6, shape=22, plot.type = "density")
install.packages("roxygen")
install.packages("roxygen2")
install.packages("roxygen2")
devtools::load_all()
iris_sub <- subset(iris, Species == "setosa")
x <- iris_sub[, 1:2]
y <- iris_sub[, 3:4]
ggmatplot(x,y,color=c("red","blue"), alpha=0.2)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8, stroke=5)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8, stroke=1)
ggmatplot(x,y,color=c("red","blue"), alpha=0.8, stroke=3)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, size=4)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, size=Group)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, size=x)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, sizey)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, size=y)
ggmatplot(x,y,color=c("red","blue"), alpha=0.3, stroke=3, size=5)
ggmatplot(x,y,color=c("red","blue"),shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
ggmatplot(x,y,color=c("red","blue"),shape = 21, colour = "black", fill = "white", size = 5, stroke = 4)
ggmatplot(x,y,color=c("red","blue"),shape = 20, colour = "black", fill = "white", size = 5, stroke = 4)
ggmatplot(x,y,color=c("red","blue"),shape = 21, colour = "black", fill = "white", size = 5, stroke = 4)
ggmatplot(x,y,color=c("red","blue"),colour = "grey90", size = 1.5)
ggmatplot(x,y,color=c("red","blue"),colour = "grey90", size = 1.5, na.rm = TRUE)
ggmatplot(x,y,color=c("red","blue"),colour = "pink", size = 1.5, na.rm = TRUE)
ggmatplot(x,y,color=c("red","blue"),colour = "pink", size = 3, na.rm = TRUE)
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", stat = "identity", colour = "pink", size = 3, na.rm = TRUE)
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", stat = "identity")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", lineend = "butt")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", lineend = "round")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", lineend = "arrow")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", lineend = "round")
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", lineend = "round", linemitre = 10)
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", arrow = arrow(angle = 15, ends = "both", type = "closed"))
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", arrow = arrow(angle = 15, ends = "both", type = "closed"),linetype = 2)
ggmatplot(x,y,color=c("red","blue"), plot.type = "line", arrow = arrow(angle = 15, ends = "both", type = "closed"),linetype = 2, random=1)
install.packages("pkgdown")
pkgdown::build_site()
install.packages('bookdown')
install.packages('tinytex')
tinytex::install_tinytex()
devtools::test()
styler:::style_active_file()
devtools::test()
testthat::expect_snapshot_file()
testthat::expect_snapshot()
snapshot_review()
expect_error(ggmatplot(x, y, plot.type = "point", shape = "red")
"e")
expect_error(ggmatplot(x, y, plot.type = "point", shape = "red"), "ERROR")
library(vdiffr)
x <- iris[, 1]
y <- iris[, 2:4]
ggmatplot(y, plot.type = "line", linetype = "dashed")
ggmatplot(y, plot.type = "line", linetype = "dashed", ylim = 2)
ggmatplot(y, plot.type = "line", linetype = "dashed", ylim = c(2,6))
ggmatplot(y, plot.type = "line", linetype = "dashed", xlim = c(2,6))
ggmatplot(y, plot.type = "line", linetype = "dashed", xlim = c(4,100))
ggmatplot(y, plot.type = "line", linetype = "dashed", xlim = c(-4,100))
ggmatplot(y, plot.type = "line", linetype = "dashed", xlim = c(-4,1000))
ggmatplot(y, plot.type = "line", linetype = "dashed", xlim = c(-4,a))
# invalid limits
expect_error(ggmatplot(y, plot.type = "line", xlim = c(-4,"a")), "ERROR")
ggmatplot(y, plot.type = "line", xlim = c(-4,"a"))
ggmatplot(y, plot.type = "line", xlim = c(-4,4))
ggmatplot(y, plot.type = "line", xlim = c(-4,a))
expect_error(ggmatplot(y, plot.type = "line", xlim = 5), "ERROR")
expect_doppelganger("density plot with x axis limits", ggmatplot(y, plot.type = "density", xlim = c(3,4)))
ggmatplot(y, plot.type = "density", xlim = c(3,4))
ggmatplot(y, plot.type = "density", xlim = c(3,4), ylim = c(1,3))
ggmatplot(y, plot.type = "density", xlim = c(3,4))
expect_doppelganger("density plot with x axis limits", ggmatplot(y, plot.type = "density", xlim = c(3,4)), ylim=c(0.2,1))
ggmatplot(y, plot.type = "density", xlim = c(3,4)), ylim=c(0.2,1)
ggmatplot(y, plot.type = "density", xlim = c(3,4), ylim=c(0.2,1))
ggmatplot(y, plot.type = "histogram")
expect_doppelganger("histogram with y axis limits", ggmatplot(y, plot.type = "histogram", ylim = 0.20))
ggmatplot(y, plot.type = "histogram", ylim = c(0,20))
ggmatplot(y, plot.type = "point", ylim = c(0,20))
ggmatplot(x,y, plot.type = "point", ylim = c(0,20))
expect_doppelganger("scatterplot with a and y axis limits", ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3))
test_that("plot axis limits are updated based on xlim and ylim parameters", {
# x axis
expect_doppelganger("density plot with x axis limits", ggmatplot(y, plot.type = "density", xlim = c(3,4)))
# y axis
expect_doppelganger("histogram with y axis limits", ggmatplot(y, plot.type = "histogram", ylim = c(0,20)))
# x and y axis
expect_doppelganger("scatterplot with a and y axis limits", ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
})
# density plot with y axis limits
ggmatplot(y, plot.type = "density", xlim = c(3,4))
# density plot with y axis limits
ggmatplot(y, plot.type = "density", ylim = c(3,4))
test_that("plot axis limits are updated based on xlim and ylim parameters", {
# x axis
expect_doppelganger("density plot with x axis limits", ggmatplot(y, plot.type = "density", xlim = c(3,4)))
# y axis
expect_doppelganger("histogram with y axis limits", ggmatplot(y, plot.type = "histogram", ylim = c(0,20)))
# x and y axis
expect_doppelganger("scatterplot with a and y axis limits", ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
})
devtools::test()
devtools::test()
expect_warning(ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3))
expect_warning(ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
expect_error(ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3)))
devtools::test()
ggmatplot(x,y, plot.type = "point", xlim = c(5,7),ylim = c(0,3))
ggmatplot(x,y, plot.type = "point")
ggmatplot(x,y, plot.type = "point", log="x")
ggmatplot(x,y, plot.type = "point", log="xy")
ggmatplot(x,y, plot.type = "point", log="xya")
ggmatplot(x,y, plot.type = "point", log="a")
ggmatplot(x,y, plot.type = "point", log="a")
ggmatplot(x,y, plot.type = "point", log="b")
ggmatplot(x,y, plot.type = "point", log="x.y")
ggmatplot(x,y, plot.type = "point", log="xy")
ggmatplot(y, plot.type = "density", log = c(3,4))
ggmatplot(y, plot.type = "density", log = c("x","y"))
ggmatplot(y, plot.type = "density", log = c("x"))
ggmatplot(y, plot.type = "density", log = c("y"))
ggmatplot(y, plot.type = "density", log = c("x","y"))
expect_doppelganger("line plot with log transformed x axis", ggmatplot(x,y, plot.type = "line", log = "x"))
ggmatplot(x,y, plot.type = "line", log = "x")
iris[, 1]
iris[, 1]-5
x <- iris[, 1]-5
ggmatplot(x,y, plot.type = "line", log = "x")
ggmatplot(x,y, plot.type = "line", log = "x")
ggmatplot(x,y, plot.type = "line", log = "y")
ggmatplot(x,y, plot.type = "point", log = "y")
ggmatplot(x,y, plot.type = "both", log = "xy")
ggmatplot(z,y, plot.type = "point")
z <- iris[, 1]-5
# negative axis values transformed using log scale
ggmatplot(z,y, plot.type = "point")
# negative axis values transformed using log scale
ggmatplot(z,y, plot.type = "point",log = "x")
z <- iris[, 1]-5
# negative axis values transformed using log scale
ggmatplot(z,y, plot.type = "point")
# negative axis values transformed using log scale
ggmatplot(z,y, plot.type = "point",log = "x")
ggmatplot(y, plot.type = "density", log = 1)
ggmatplot(x,y, plot.type = "line", main="title test")
ggmatplot(x,y, plot.type = "line", main="title test")$labels
ggmatplot(x,y, plot.type = "line", main="title test")$labels$title
expect_equal(ggmatplot(x,y, plot.type = "line", main="title test")$labels$title, "title test")
ggmatplot(x,y, plot.type = "line")$labels$title
expect_equal(ggmatplot(x,y, plot.type = "line")$labels$title, NULL)
expect_equal(ggmatplot(x,y, plot.type = "line", main=1)$labels$title, "title test")
ggmatplot(x,y, plot.type = "line", main=1)
ggmatplot(x,y, plot.type = "line", main=123)
ggmatplot(x,y, plot.type = "line", main=123)$labels
ggmatplot(x,y, plot.type = "line", main=123)$labels$title
ggmatplot(x,y, plot.type = "line", main=c(123))
ggmatplot(x,y, plot.type = "line", main=c(12,3))
expect_equal(ggmatplot(x,y, plot.type = "line", main="title test")$labels$title, "title test")
ggmatplot(x,y, plot.type = "line")$labels$xlab
ggmatplot(x,y, plot.type = "line")
ggmatplot(x,y, plot.type = "line")$labels
ggmatplot(x,y, plot.type = "line")$labels$x
ggmatplot(y, plot.type = "line")$labels$x
expect_equal(ggmatplot(x,y, plot.type = "line", xlab="xlab test")$labels$x, "xlab test")
expect_equal(ggmatplot(x,y, plot.type = "line", ylab="ylab test")$labels$y, "ylab test")
expect_equal(ggmatplot(y, plot.type = "density", ylab="ylab test")$labels$y, "ylab test")
ggmatplot(y, plot.type = "density", ylab="ylab test")$labels$y
ggmatplot(y, plot.type = "density", ylab="ylab test")
expect_equal(ggmatplot(y, plot.type = "point", ylab="ylab test")$labels$y, "ylab test")
ggmatplot(x,y, plot.type = "line", xlab="xlab test")$labels
devtools::test()
devtools::test()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::test()
x <- tibble(a = 1:3, b = 11:13, c = 31:33)
y <- tibble(d = 51:53)
ggmatplot(x,y)
ggmatplot(x,y,plot.type = "density")
ggmatplot(x,plot.type = "density")
ggmatplot(x,plot.type = "density", y =..stat..)
ggmatplot(x,plot.type = "density", position = "stack")
ggmatplot(x,plot.type = "density", position = "fill")
ggmatplot(x,plot.type = "density", position = "fill", y=..scaled..)
devtools::load_all()
ggmatplot(x,plot.type = "density", position = "fill", y=..scaled..)
ggmatplot(x,plot.type = "density", position = "fill")
devtools::load_all()
