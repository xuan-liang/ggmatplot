geom_density() +
xlim(55, 70)
ggplot(head(diamonds,1000), aes(depth, colour = cut)) +
geom_density() +
xlim(55, 70)
x <- head(diamonds[,c(2,5)],1000)
ggmatplot(x, plot_type = "density")
x <- head(diamonds[,c(2,5)],1000)
devtools::load_all()
ggmatplot(x, plot_type = "density")
ggmatplot(x, plot_type = "density")
ggplot(head(diamonds,1000), aes(depth, colour = cut)) +
geom_density() +
xlim(55, 70)
head(diamonds,1000)
head(diamonds,1000)
unique(head(diamonds,1000)$depth)
unique(head(diamonds,1000)$cut)
x <- tibble(a = 1:3, b = 11:13, c = 31:33)
y <- tibble(d = 51:53)
x <- tibble(a = 1:3, b = 11:13, c = 31:33)
y <- tibble(d = c(51,52,NA))
y
matclean(x,y)
ggmatplot(x,y)
devtools::load_all()
ggmatplot(x,y)
ggmatplot(x,y, rand ="")
devtools::load_all()
ggmatplot(x,y, rand ="")
ggmatplot(x,y)
ggmatplot(x,y, rand = "")
ggmatplot(x,y, rand = "", wrong ="")
ggmatplot(x,y, rand = "", wrong ="")
devtools::load_all()
ggmatplot(x,y, rand = "", wrong ="")
ggmatplot(x,y, rand = "", wrong ="")
devtools::load_all()
ggmatplot(x,y, rand = "", wrong ="")
tryCatch(
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- p +
do.call(
c(random = "")
),
warning = function(w) {
if(grepl('Ignoring unknown parameters', w$message))
unknown_params_wmsg <- w$message
warning(as.character(w$message))
}
)
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- p +
do.call(
c(random = "")
)
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- p +
do.call("geom_point",
c(random = "")
)
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- p +
do.call("geom_point",
list(random = "")
)
tryCatch(
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
if(grepl('Ignoring unknown parameters', w$message))
unknown_params_wmsg <- w$message
warning(as.character(w$message))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
if(grepl('Ignoring unknown parameters', w$message))
unknown_params_wmsg <- w$message
warning(as.character(w$message))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
if(grepl('Ignoring unknown parameters', w))
unknown_params_wmsg <- w
warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
x <- w
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
x
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "")
),
warning = function(w) {
x <- w
print(w$message)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "", stat = "")
),
warning = function(w) {
x <- w
print(w$message)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(random = "", stat = "")
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list( stat = "")
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
p <- p +
do.call("geom_point",
list(stat = "")
)
tryCatch(
p <- p +
do.call("geom_point",
list(stat = "", log = 23)
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(rand = "", log = 23)
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
tryCatch(
p <- p +
do.call("geom_point",
list(rand = "", log = 23, alpha = 0.4)
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
tryCatch(
p <- p +
do.call("geom_point",
list(rand = "", log = 23, alpha = 0.4)
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
p
p
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- diamonds %>%
ggplot(aes(x = depth, y = cut)) +
geom_point()
p
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
p <- diamonds %>%
ggplot(aes(x = depth, y = cut))
tryCatch(
p <- p +
do.call("geom_point",
list(rand = "", log = 23, alpha = 0.4)
),
warning = function(w) {
x <- w
print(w)
# if(grepl('Ignoring unknown parameters', w))
#   unknown_params_wmsg <- w
# warning(as.character(w))
}
)
p
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::load_all()
devtools::load_all()
x <- iris[, 1]
y <- iris[, 3:4]
ggmatplot(x,y)
ggmatplot(x)
ggmatplot(xy, stat= "")
ggmatplot(x,y, stat= "")
devtools::load_all()
ggmatplot(x,y, stat= "")
ggmatplot(x,y, stat= "", rand = "")
ggmatplot(x,y, stat= "")
ggmatplot(x,y, rand= "")
devtools::load_all()
ggmatplot(x,y, rand= "")
ggmatplot(x,y, stat = "")
devtools::load_all()
ggmatplot(x,y, stat = "")
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
ggmatplot(x,y)
ggmatplot(x,y, stat = "", rand = "")
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y, stat = "", rand = "")
devtools::load_all()
ggmatplot(x,y)
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
plot <- plot + do.call("geom_point", c(list(...)))
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, wrong = "")
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
)warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w$message)
}
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
)warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w$message)
}
return(plot)}
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
)warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w$message)
}
return(plot)}
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
,warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w$message)
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
,warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w)
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
,warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w[2])
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...)))
,warning = function(w) {
# if(grepl('Ignoring unknown parameters', w$message)){
#   unknown_params_wmsg <- w$message}
print(w[1])
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...))),
warning = function(w) {
print(w)
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
plot <- plot + do.call("geom_point", c(list(...)))
return(plot)}
draw_plot(data, test = 2, stat = "")
draw_plot(data)
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
plot <- plot + do.call("geom_point", c(list(...)))
return(plot)}
draw_plot(data, test = 2, stat = "")
draw_plot(data, test = 2)
draw_plot(data, test = 2, rand = "")
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(withCallingHandlers(
plot <- plot + do.call("geom_point", c(list(...))),
warning = function(w) {
print(w)
}))
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...))),
warning = function(w) {
print(w[1])
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(
plot <- plot + do.call("geom_point", c(list(...))),
warning = function(w) {
print(w)
})
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
draw_plot <- function(data, ...){
plot <- ggplot(data = data, mapping = aes(x = x, y = y))
tryCatch(withCallingHandlers(
plot <- plot + do.call("geom_point", c(list(...))),
warning = function(w) {
print(w)
}))
return(plot)}
data <- tibble::tibble(x = c(1,2,3,4,5,6), y = c(5,6,7,8,9,10))
draw_plot(data, test = 2, stat = "")
install.packages("rgeoboundaries")
remotes::install_github("wmgeolab/rgeoboundaries")
devtools::load_all()
x <- iris[, 1]
y <- iris[, 2:4]
ggmatplot(x,y)
ggmatplot(x,y, rand="")
ggmatplot(x,y, rand="", stat="")
x <- iris[, 1]
y <- iris[, 2:4]
devtools::load_all()
ggmatplot(x,y, rand="", stat="")
devtools::load_all()
vignette("eddible")
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
styler:::style_active_file()
options(width=80)
devtools::document()
devtools::build_site()
devtools::build_site()
devtools::document()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_site()
devtools::check()
devtools::document()
styler:::style_active_file()
styler:::style_active_file()
devtools::test()
